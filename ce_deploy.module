<?php

/**
 * Delete all instances of a given field.
 * @param string $field_name
 *   The field to delete.
 * @param string $entity_type
 *   The parent entity type.
 */
function ce_deploy_delete_all_field_instances($field_name, $entity_type = 'node') {
  $properties = array(
    'entity_type' => $entity_type,
    'include_deleted' => TRUE,
    'field_name' => $field_name,
  );
  $fields = \Drupal::entityManager()->getStorage('field_config')->loadByProperties($properties);
  $info = \Drupal::entityManager()->getDefinitions();
  foreach ($fields as $field) {
    $entity_type = $field->getTargetEntityTypeId();

    // Proceed only if the module implementing the entity has not been uninstalled already.
    if (isset($info[$entity_type])) {
      Drupal::entityManager()->getStorage($entity_type)->purgeFieldData($field, 100);
    }
    $field->delete();
    field_purge_field($field);
  }
}

/**
 * Create a taxonomy with terms from file stored in data/taxonomy folder.
 *
 * The structure of the yml must be:
 * vocabulary: Test
 * vid: test
 * langcode: en (optional)
 * description: Taxonomy test (optional)
 * terms:
 *   - name: Test 1
 *     description: ....(optional)
 *   - name: Test 2
 *     description: ....(optional)
 *   - ....
 *
 * @param string $filename
 *   Name of file to import the taxonomy/terms.
 *   File extension is not required.
 */
function ce_deploy_create_taxonomy($filename) {
  $file_path = DRUPAL_ROOT . "/../data/taxonomy/" . $filename . ".yml";
  if (file_exists($file_path)) {
    // Read YAML file to get attributes.
    $taxonomy_file = Yaml::decode(file_get_contents($file_path));
    if ($taxonomy_file) {
      if (isset($taxonomy_file['vocabulary']) && isset($taxonomy_file['vid'])) {
        // Check if vocabulary already exists.
        $vocabularies = Vocabulary::loadMultiple();
        if (!isset($vocabularies[$taxonomy_file['vid']])) {
          $vocabulary_values = [
            'vid' => $taxonomy_file['vid'],
            'machine_name' => $taxonomy_file['vid'],
            'name' => $taxonomy_file['vocabulary'],
          ];

          // Add langcode and description if exists.
          if (isset($taxonomy_file['langcode'])) {
            $vocabulary_values['langcode'] = $taxonomy_file['langcode'];
          }

          if (isset($taxonomy_file['uuid'])) {
            $vocabulary_values['uuid'] = $taxonomy_file['uuid'];
          }

          if (isset($taxonomy_file['description'])) {
            $vocabulary_values['description'] = $taxonomy_file['description'];
          }

          $vocabulary = Vocabulary::create($vocabulary_values);
          $vocabulary->save();
        }

        // Add terms to the vocabulary.
        if (isset($taxonomy_file['terms']) && is_array($taxonomy_file['terms'])) {
          foreach ($taxonomy_file['terms'] as $term) {
            if (isset($term['name'])) {
              $term_values = [
                'name' => $term['name'],
                'vid' => $taxonomy_file['vid'],
              ];

              // Add langcode if exists.
              if (isset($taxonomy_file['langcode'])) {
                $term_values['langcode'] = $taxonomy_file['langcode'];
              }

              // Add description if exists.
              if (isset($term['description'])) {
                $term_values['description'] = $term['description'];
              }

              $new_term = Term::create($term_values);
              $new_term->save();
            }
          }
        }
      }
    }
  }
}

/**
 * Ensures icon files for ckeditor embed buttons are available.
 *
 * WHY: Embed icons are non-exportable. There's a pending patch in d.org to make
 * it possible to reference them by actual path, and not only file_managed
 * (uuid). For the time being, custom solution is used.
 *
 * This function does 2 things:
 *
 * 	1.- Scans the available files for the buttons specified in $buttons_map, and
 *  moves them to the directory where the embed module expects them. The files
 *  are meant to be in the "images/embed_icons" of the ce_deploy module.
 *
 * 	2.- Then loads the available embed buttons, and checks the ones specified
 *  in the $button_map array. For those, checks if there's an existinf file. If
 *  there is, it does nothing. If there isn't, it picks the specified file from
 *  the map array, creates a File entity in the database, and assigns to it the
 *  icon uuid expected by the button entity.
 *
 * @link https://www.drupal.org/project/embed/issues/2824110.
 */
function ce_deploy_ensure_embed_buttons_icons() {
	$buttons_map = [
		'youtube_video' => 'youtube_icon_ckeditor.png',
		'file_button' => 'file_icon_ckeditor.png',
	];

	$source = drupal_get_path('module', 'ce_deploy') . '/images/embed_icons';
	$embed_config = \Drupal::config('embed.settings');
	$destination = $embed_config->get('file_scheme') . '://' . $embed_config->get('upload_directory') . '/';
	file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

	$files = file_scan_directory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
	foreach ($files as $file) {
		// Copy icon files to destination, if they don't exist already.
		if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
			file_unmanaged_copy($file->uri, $destination, FILE_EXISTS_ERROR);
		}
	}

	/* @var \Drupal\embed\Entity\EmbedButton[] $embed_buttons */
	$embed_buttons = \Drupal\embed\Entity\EmbedButton::loadMultiple();

	foreach ($embed_buttons as $button) {
		// Process only icons defined above.
		if (!isset($buttons_map[$button->id()])) {
			\Drupal::logger('ctbto_core')->info('Button not set in custom map. Skipping icon creation: %button', ['%button' => $button->id()]);
			continue;
		}

		/* @var \Drupal\file\Entity\File $icon_file */
		if ($icon_file = $button->getIconFile()) {
			\Drupal::logger('ctbto_core')->info('Button already has an existing file. Skipping. Button id: %button', ['%button' => $button->id()]);
			continue;
		}

		$icon_file = \Drupal\file\Entity\File::create([
			'uuid' => $button->icon_uuid,
			'filename'  => $buttons_map[$button->id()],
			'langcode' => 'en',
			'uid' => 1,
			'uri' => $destination . $buttons_map[$button->id()],
			'status' => 1,
		]);
		$icon_file->save();
		\Drupal::logger('ctbto_core')->info('Created file for Button %button', ['%button' => $button->id()]);
	}
}
